use std::ops::and::And
use std::ops::ior::Ior
use std::ops::eq::Eq
use std::ops::ne::Ne


@public
cls Bool { }


sup Bool ext And[Rhs=Bool] {
    @compiler_builtin
    fun and(self, that: Bool) -> Bool { }
}


sup Bool ext Ior[Rhs=Bool] {
    @compiler_builtin
    fun ior(self, that: Bool) -> Bool { }
}


sup Bool ext Eq[Rhs=Bool] {
    @compiler_builtin
    fun eq(&self, that: Bool) -> Bool { }
}


sup Bool ext Ne[Rhs=Bool] {
    @compiler_builtin
    fun ne(&self, that: Bool) -> Bool { }
}
