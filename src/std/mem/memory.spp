use std::clone::Clone
use std::copy::Copy
use std::number::USize
use std::option::Opt
use std::single::Single
use std::void::Void


cls Memory[T] {
    @private
    ptr: Single[T]

    @private
    cap: USize
}


sup [T] Memory[T] {
    type Element = T

    @public
    fun capacity(&self) -> USize {
        ret self.cap
    }

    @public
    @compiler_builtin
    fun clear(&mut self) -> Void { }

    @protected
    @compiler_builtin
    fun take(&mut self, index: USize) -> Opt[T] { }

    @protected
    @compiler_builtin
    fun place(&mut self, index: USize, value: T) -> Void { }
}


sup [T] Memory[T] ext Clone[Out=Memory[T]] {
    @no_impl
    fun clone(&self) -> Memory[T] { }
}


sup [T: Copy] Memory[T] ext Copy { }
