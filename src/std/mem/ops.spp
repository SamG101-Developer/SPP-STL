use std::copy::Copy
use std::mem::memory::Memory
use std::number::USize
use std::option::Opt
use std::option::None
use std::option::Some
use std::result::Exception
use std::void::Void


cls MemoryIncompatibleSize {}
sup MemoryIncompatibleSize ext Exception { }


@compiler_builtin
fun size_of[T]() -> USize {
    # Returns the size of a type at compile time.
}


@compiler_builtin
fun size_of_value[T](value: T) -> USize {
    # Handles heap size checking for types that are not known at compile time.
}


fun malloc[T](n: USize) -> Opt[Memory[T]] {
    # Determine the size and get an allocated pointer.
    let size = n * size_of[T]()
    let ptr = libc::malloc[T](size)

    # Convert the returned pointer into a safe type.
    ret case ptr of
        == 0 { None() }
        else { Some(val=ptr.mem) }
}


fun calloc[T](n: USize) -> Opt[Memory[T]] {
    # Determine the size and get an allocated pointer.
    let size = n * size_of[T]()
    let ptr = libc::calloc(n, size_of_value(T))

    # Convert the returned pointer into a safe type.
    ret case ptr of
        == 0 { None() }
        else { Some(val=ptr.mem) }
}


fun realloc[T](memory: &mut Memory[T], n: USize) -> Opt[Void] {
    # Determine the size and get a reallocated pointer.
    let size = n * size_of[T]()
    let out = libc::realloc(&mut memory, size)

    # If the new pointer is null, return None (failed reallocation).
    case out == 0 { ret None() }

    # Otherwise, assign the new pointer and update the length.
    memory.len = n

    ret Some[Void]()
}


fun free[T](memory: Memory[T]) -> Void {
    # Free the memory pointed to by the pointer.
    libc::free(memory)
}
