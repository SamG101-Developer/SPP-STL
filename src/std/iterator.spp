@public
cls IterMov[T] { }
sup [T] IterMov[T] {
    @abstract_method
    cor iter_mov(self) -> Iterator[T] { }
}


@public
cls IterMut[T] { }
sup [T] IterMut[T] {
    @abstract_method
    cor iter_mut(&mut self) -> Iterator[&mut T] { }
}


@public
cls IterRef[T] { }
sup [T] IterRef[T] {
    @abstract_method
    cor iter_ref(&self) -> Iterator[&T] { }
}


cls Iterator[T] { }
sup [T] Iterator[T] {
    @virtual_method
    fun filter(self, predicate: function::FunRef[(T,), boolean::Bool]) -> Iterator[T] {
        for item in self {
            case predicate(item) { gen item }
        }
    }

    @virtual_method
    fun map[U](self, mapper: function::FunRef[(T,), U]) -> Iterator[U] {
        for item in self {
            gen mapper(item)
        }
    }
}


sup [T] Iterator[T] ext generator::Gen[T] { }
