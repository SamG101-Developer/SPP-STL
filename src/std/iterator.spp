use std::boolean::Bool
use std::function::FunRef
use std::generator::Gen
use std::generator::GenOnce
use std::number::usize::USize
use std::option::None
use std::option::Opt
use std::option::Some
use std::void::Void


@public
cls IterMov[T] { }
sup [T] IterMov[T] {
    @abstract_method
    cor iter_mov(self) -> Iterator[T] { }
}


@public
cls IterMut[T] { }
sup [T] IterMut[T] {
    @abstract_method
    cor iter_mut(&mut self) -> Iterator[&mut T] { }
}


@public
cls IterRef[T] { }
sup [T] IterRef[T] {
    @abstract_method
    cor iter_ref(&self) -> Iterator[&T] { }
}


@public
cls IndexMut[T, I] { }
sup [T, I] IndexMut[T, I] {
    @abstract_method
    cor index_mut(&mut self, index: I) -> GenOnce[&mut T] { }
}


@public
cls IndexRef[T, I] { }
sup [T, I] IndexRef[T, I] {
    @abstract_method
    cor index_ref(&self, index: I) -> GenOnce[&T] { }
}


# sup [T, I] IndexRef[T, I] ext FunRef[(I,), GenOnce[&T]] {
#     @compiler_builtin
#     fun call_ref(&self, args: (I,)) -> GenOnce[&T] { }
# }


@public
cls Iterator[T] { }


sup [T] Iterator[T] {
    cor concat(self, other: Iterator[T]) -> Iterator[T] {
        gen with self
        gen with other
    }

    cor cycle(self) -> Iterator[T] {
        loop true {
            gen with self
        }
    }

    cor drop(self, count: USize) -> Iterator[T] {
        let mut index = 0_uz
        loop item in self {
            case index >= count {
                gen item
            }
            index += 1_uz
        }
    }

    cor filter(self, predicate: FunRef[(&T,), Bool]) -> Iterator[T] {
        loop item in self {
            case predicate(&item) {
                gen item
            }
        }
    }

    cor take(self, count: USize) -> Iterator[T] {
        let mut index = 0_uz
        loop item in self {
            case index < count {
                gen item
                index += 1_uz
                skip
            }
            exit
        }
    }

    cor map[U](self, mapper: FunRef[(T,), U]) -> Iterator[U] {
        loop item in self {
            gen mapper(item)
        }
    }

    cor slice(self, start: USize, end: USize) -> Iterator[T] {
        let mut index = 0_uz
        loop item in self {
            case index >= start and index < end {
                gen item
            }
            index += 1_uz
        }
    }

    cor step_by(self, step: USize) -> Iterator[T] {
        let mut index = 0_uz
        loop item in self {
            case index % step == 0_uz {
                gen item
            }
            index += step
        }
    }

    fun count(self) -> USize {
        let mut count = 0_uz
        loop item in self {
            count += 1_uz
        }
        ret count
    }

    fun fold[U](self, initial: U, reducer: FunRef[(U, T), U]) -> U {
        let mut acc = initial
        loop item in self {
            acc = reducer(acc, item)
        }
        ret acc
    }

    fun all(self, predicate: FunRef[(T,), Bool]) -> Bool {
        loop item in self {
            case predicate(item).not {
                ret false
            }
        }
        ret true
    }

    fun any(self, predicate: FunRef[(T,), Bool]) -> Bool {
        loop item in self {
            case predicate(item) {
                ret true
            }
        }
        ret false
    }

    fun find(self, predicate: FunRef[(&T,), Bool]) -> Opt[T] {
        loop item in self {
            case predicate(&item) {
                ret Some(val=item)
            }
        }
        ret None()
    }

    fun for_each(self, action: FunRef[(T,), Void]) -> Void {
        loop item in self {
            action(item)
        }
    }
}


sup [T] Iterator[T] ext Gen[T] { }
