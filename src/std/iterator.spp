use std::generator::Gen
use std::boolean::Bool
use std::function::FunRef


@public
cls IterMov[T] { }
sup [T] IterMov[T] {
    @abstract_method
    cor iter_mov(self) -> Iterator[T] { }
}


@public
cls IterMut[T] { }
sup [T] IterMut[T] {
    @abstract_method
    cor iter_mut(&mut self) -> Iterator[&mut T] { }
}


@public
cls IterRef[T] { }
sup [T] IterRef[T] {
    @abstract_method
    cor iter_ref(&self) -> Iterator[&T] { }
}


@public
cls Iterator[T] { }


sup [T] Iterator[T] {
    @virtual_method
    cor filter(&self, predicate: FunRef[(T,), Bool]) -> Iterator[T] {
        loop item in self {
            # case predicate(item) {
            #     gen item
            # }
            gen item
        }
    }

    @virtual_method
    cor map[U](&self, mapper: FunRef[(T,), U]) -> Iterator[U] {
        loop item in self {
            # gen mapper(item)
        }
    }
}


sup [T] Iterator[T] ext Gen[T] { }
