use std::array::Arr
use std::cast::From
use std::mem::memory::Memory
use std::number::USize
use std::vector::Vec


cls Slice[E] {
    @public
    len: USize
}


sup [E] Slice[E] ext Memory[E] {
    fun len(&self) -> USize {
        ret self.length
    }
}


sup [E, cmp n: USize] Slice[E] ext From[Self, Arr[E, n]] {
    fun from(that: Arr[E, n]) -> Self {
        ret Slice[E](ptr=that.ptr, cap=that.cap, len=n)
    }
}


sup [E, A] Slice[E] ext From[Self, Vec[E, A]] {
    fun from(that: Vec[E, A]) -> Self {
        ret that.buffer
    }
}
