use std::boolean::Bool
use std::cast::From
use std::number::U32
use std::option::Opt
use std::option::None
use std::option::Some
use std::void::Void

use std::num::sized_integer::SizedInteger
use std::num::sized_integer_signed::SizedIntegerSigned
use std::num::sized_floating_point::SizedFloatingPoint


# Type alias the "unsigned" version of the the sized integer type.
type SizedIntegerUnsigned[cmp bit_width: U32] = SizedInteger[bit_width, false]


sup [cmp bit_width: U32] SizedIntegerUnsigned[bit_width] ext std::ops::div::Div[Rhs=Self, Ret=Self] {
    fun div(self, that: Self) -> Self {
        ret intrinsics::udiv(self, that)
    }
}


sup [cmp bit_width: U32] SizedIntegerUnsigned[bit_width] ext std::ops::div::DivAssign[Rhs=Self] {
    fun div_assign(&mut self, that: Self) -> Void {
        ret intrinsics::udiv_assign(self, that)
    }
}


sup [cmp bit_width: U32] SizedIntegerUnsigned[bit_width] ext std::ops::rem::Rem[Rhs=Self, Ret=Self] {
    fun rem(self, that: Self) -> Self {
        ret intrinsics::urem(self, that)
    }
}


sup [cmp bit_width: U32] SizedIntegerUnsigned[bit_width] ext std::ops::rem::RemAssign[Rhs=Self] {
    fun rem_assign(&mut self, that: Self) -> Void {
        ret intrinsics::urem_assign(self, that)
    }
}


sup [cmp bit_width: U32] SizedIntegerUnsigned[bit_width] {
    @public
    @inline
    fun min(self, that: Self) -> Self {
        ret intrinsics::umin(self, that)
    }

    @public
    @inline
    fun max(self, that: Self) -> Self {
        ret intrinsics::umax(self, that)
    }
}


sup [cmp bit_width: U32] SizedIntegerUnsigned[bit_width] {
    @public
    @inline
    fun sub_checked(self, that: Self) -> Opt[Self] {
        ret case self < that { None() } else { intrinsics::sub(self, that) }
    }

    @public
    @inline
    fun sub_overflow(self, that: Self) -> (Self, Bool) {
        ret intrinsics::usub_overflow(self, that)
    }

    @public
    @inline
    fun sub_saturating(self, that: Self) -> Self {
        ret intrinsics::usub_saturating(self, that)
    }

    @public
    @inline
    fun sub_wrapping(self, that: Self) -> Self {
        ret intrinsics::usub_wrapping(self, that)
    }
}


sup [cmp bit_width: U32] SizedIntegerUnsigned[bit_width] {
    @public
    @inline
    fun mul_checked(self, that: Self) -> Opt[Self] {
        let (val, overflowed) = intrinsics::umul_overflow(self, that)
        ret case overflowed { None() } else { Some(val) }
    }

    @public
    @inline
    fun mul_overflow(self, that: Self) -> (Self, Bool) {
        ret intrinsics::umul_overflow(self, that)
    }

    @public
    @inline
    fun mul_saturating(self, that: Self) -> Self {
        ret case self.mul_checked(that) of
            is Some(val) { val }
            else { Limits[Self]::max }
    }

    @public
    @inline
    fun mul_wrapping(self, that: Self) -> Self {
        ret intrinsics::umul_wrapping(self, that)
    }
}


sup [cmp bit_width: U32] SizedIntegerUnsigned[bit_width] {
    @public
    @inline
    fun div_checked(self, that: Self) -> Opt[Self] {
        case that == Self::zero() {
            ret None()
        }
        ret Some(val=intrinsics::udiv(self, that))
    }

    @public
    @inline
    fun div_overflow(self, that: Self) -> (Self, Bool) {
        ret (intrinsics::udiv(self, that))
    }

    @public
    @inline
    fun div_saturating(self, that: Self) -> Self {
        ret self.div_wrapping(that)
    }

    @public
    @inline
    fun div_wrapping(self, that: Self) -> Self {
        ret intrinsics::udiv(self, that)
    }

    @public
    @inline
    fun div_floor(self, that: Self) -> Self {
        ret intrinsics::udiv(self, that)
    }

    @public
    @inline
    fun div_ceil(self, that: Self) -> Self {
        let d = self / that
        let r = self % that
        ret case r > 0 { d + Self::one() } else { d }
    }
}


sup [cmp bit_width: U32] SizedIntegerUnsigned[bit_width] {
    @public
    @inline
    fun rem_checked(self, that: Self) -> Opt[Self] {
        case that == Self::zero() {
            ret None()
        }
        ret Some(val=intrinsics::urem(self, that))
    }

    @public
    @inline
    fun rem_overflow(self, that: Self) -> (Self, Bool) {
        ret (intrinsics::urem(self, that), false)
    }

    @public
    @inline
    fun rem_wrapping(self, that: Self) -> Self {
        ret self.rem_overflow(that).0
    }
}


sup [cmp bit_width: U32] SizedIntegerUnsigned[bit_width] {
    @public
    @inline
    fun pow_saturating(self, that: U32) -> Self {
        case self.pow_checked(that) of
            is Some(val) { val }
            else { Limits[Self]::max }
    }
}


sup [cmp bit_width: U32] SizedIntegerUnsigned[bit_width] {
    @public
    @inline
    fun mod(self, that: Self) -> Self {
        ret self % that
    }
}


sup [cmp bit_width: U32] SizedIntegerUnsigned[bit_width] {
    # The "iroot_checked" function computes the integer root of the sized integer with a given base and returns an
    # optional value. It uses the Newton-Raphson method to find the root, iterating until the result stabilizes. Bypass
    # any negative checks as the numbers are unsigned.
    @public
    @inline
    fun iroot(self, base: Self) -> Opt[Self] {
        case self <= Self::one() {
            ret Some(val=self)
        }

        let mut x = Self::one() << (bit_width / base.ilog2_checked().unwrap_or(1))
        loop true {
            let mut y = ((base - Self::one()) * x + self / x.pow(base - Self::one())) / (base)
            case y >= x {
                ret Some(val=x)
            }
            x = y
        }
    }
}
