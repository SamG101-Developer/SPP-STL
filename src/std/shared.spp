cls Shared[T] {
    shared_counter: U64
    shadow_counter: U64
}

sup [T] Shared[T] {
    @public
    @compiler_builtin
    fun new() -> Shared[T] { }

    @public
    fun shadow(&self) -> Shadow[T] {
        self.shadow_counter += 1
        ret Shadow::new(&self)
    }

    @compiler_builtin
    fun inner_clone(&self) -> Shared[T] { }
}

sup [T] Shared[T] ext Clone[Shared[T]] {
    @public
    fun clone(&self) -> Shared[T] {
        self.shared_counter += 1
        ret self.inner_clone()
    }
}

sup [T] Shared[T] ext ops::DerefRef[T] {
    @public
    @compiler_builtin
    cor deref_ref(&self) -> Gen[&T] { }
}

sup [T] Shared[T] ext ops::DerefMut[T] {
    @public
    @compiler_builtin
    fun deref_mut(&mut self) -> Gen[&mut T] { }
}
