use std::number::U8
use std::number::USize
use std::number::S32
use std::result::Res
use std::result::Fail
use std::result::Pass
use std::slice::Slice
use std::streams::ReadableStream
use std::streams::StreamReadException
use std::vector::Vec


@public
cmp stdin: StdinStream = StdinStream()


@private
cmp stdin_handle: S32 = 1_s32


@private
cls StdinStream { }


sup StdinStream ext ReadableStream {
    fun read(&mut self, len: USize) -> Res[Vec[U8], StreamReadException] {
        let mut vec = Vec[U8]()
        let val = libc::fgets(&mut vec.buffer, 1024_s32, &stdin_handle)
        # TODO
        # ret case val < 0 { Fail(err=StreamReadException(msg="Failed to read from stdin")) } else { Pass(val=vec) }
        ret Pass(val=vec)
    }

    fun read_all(&mut self) -> Res[Vec[U8], StreamReadException] {
        let mut vec = Vec[U8]()
        loop true {
            let val = self.read(1024_uz)
            case val < 0 {
                ret Fail(err=StreamReadException(msg="Failed to read from stdin"))
            }
            else case val.is_empty() {
                exit
            }
            else {
                vec += val
            }
        }
        ret Pass(val=vec)
    }
}
