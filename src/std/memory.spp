use std::allocator::GlobalAlloc
use std::generator::Gen
use std::iterator::IndexMut
use std::iterator::IndexRef
use std::iterator::Iterator
use std::iterator::IterMov
use std::iterator::IterMut
use std::iterator::IterRef
use std::number::usize::USize
use std::option::None
use std::option::Some
use std::option::Opt
use std::range::Range
use std::void::Void


cls Memory[T, A = GlobalAlloc[T]] {
    @private
    start: USize

    @private
    capacity: USize
}


sup [T, A] Memory[T, A] {
    type Element = T
    type Allocator = A

    @protected
    fun cap(&self) -> USize {
        ret self.capacity
    }

    @public
    @abstract_method
    fun len(&self) -> USize { }

    @protected
    @no_impl
    fun shift(&mut self, index: USize, count: USize) -> Void {
        # ffi::libc::memmove(self.start + index + count, self.start.index, count)
    }

    @protected
    @no_impl
    fun take(&self, index: USize) -> Opt[T] {
        # Remove an item from this memory chunk. Uses an immutable `&self` as its a special function required in mutable
        # iteration.
    }

    @protected
    @no_impl
    fun place(&self, index: USize, elem: T) -> Void {
        # Place an item in this memory chunk. Uses an immutable `&self` as its a special function required in mutable
        # iteration.
    }

    fun clear(&mut self) -> Void {
        # ffi::libc::memset(self.start + self.capacity, 0)
    }

    fun resize(&mut self, new_capacity: USize) -> Void {
        # Self::Allocator::reallocate(self, new_capacity)
    }
}


sup [T, A] Memory[T, A] ext IterMov[T] {
    cor iter_mov(self) -> Iterator[T] {
        loop index in Range(start=0_uz, end=self.capacity) {
            let elem = self.take(index)
            case elem is Some[T](val) { gen val }
        }
    }
}


sup [T, A] Memory[T, A] ext IterMut[T] {
    cor iter_mut(&mut self) -> Iterator[&mut T] {
        loop index in Range(start=0_uz, end=self.capacity) {
            let mut elem = self.take(index)
            case elem is Some[T](mut val) {
                gen &mut val
                self.place(index, val)
            }
        }
    }
}


sup [T, A] Memory[T, A] ext IterRef[T] {
    cor iter_ref(&self) -> Iterator[&T] {
        loop index in Range(start=0_uz, end=self.capacity) {
            let elem = self.take(index)
            case elem is Some[T](val) {
                gen &val
                self.place(index, val)
            }
        }
    }
}


sup [T, A] Memory[T, A] ext IndexMut[T, USize] {
    cor index_mut(&mut self, index: USize) -> GenOnce[&mut T] {
        let mut elem = self.take(index)
        case elem is Some[T](mut val) {
            gen &mut val
            self.place(index, val)
        }  # todo: replace with .unwrap()
    }
}


sup [T, A] Memory[T, A] ext IndexRef[T, USize] {
    cor index_ref(&self, index: USize) -> Gen[&T] {
        let elem = self.take(index)
        case elem is Some[T](val) {
            gen &val
            self.place(index, val)
        }  # todo: replace with .unwrap()
    }
}
