use std::slice::Slice
use std::number::USize
use std::result::Exception
use std::result::Res
use std::void::Void


cls AllocException { }
sup AllocException ext Exception { }


cls Alloc[E] { }


sup [E] Alloc[E] {
    @public
    @abstract_method
    fun allocate(n: USize) -> Res[Slice[E], AllocException] { }

    @public
    @abstract_method
    fun allocate_zeroed(n: USize) -> Res[Slice[E], AllocException] { }

    @public
    @abstract_method
    fun deallocate(memory: Slice[E]) -> Res[Void, AllocException] { }

    @public
    @abstract_method
    fun reallocate(memory: &mut Slice[E], n: USize) -> Res[Void, AllocException] { }
}


cls GlobalAlloc[E] { }


sup [E] GlobalAlloc[E] ext Alloc[E] {
    fun allocate(n: USize) -> Res[Slice[E], AllocException] {
        std::mem::ops::malloc[E](n).ok_or(AllocException(msg="Failed to allocate memory"))
    }

    fun allocate_zeroed(n: USize) -> Res[Slice[E], AllocException] {
        std::mem::ops::calloc[E](n).ok_or(AllocException(msg="Failed to allocate zeroed memory"))
    }

    fun deallocate(memory: Slice[E]) -> Res[Void, AllocException] {
        std::mem::ops::free[E](memory).ok_or(AllocException(msg="Failed to deallocate memory"))
    }

    fun reallocate(memory: &mut Slice[E], n: USize) -> Res[Void, AllocException] {
        std::mem::ops::realloc[T=E](memory, n).ok_or(AllocException(msg="Failed to reallocate memory"))
    }
}
