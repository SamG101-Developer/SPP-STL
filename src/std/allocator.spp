use std::number::usize::USize
use std::result::Exception
use std::result::Res
use std::array::ArrDynamic
use std::void::Void


cls AllocException { }


sup AllocException ext Exception { }


cls Alloc[E] { }


sup [E] Alloc[E] {
    @public
    @abstract_method
    fun allocate(n: USize) -> Res[ArrDynamic[E], AllocException] { }
    
    @public
    @abstract_method
    fun allocate_zeroed(n: USize) -> Res[ArrDynamic[E], AllocException] { }
    
    @public
    @abstract_method
    fun deallocate(memory: ArrDynamic[E]) -> Res[Void, AllocException] { }
    
    @public
    @abstract_method
    fun reallocate(memory: &mut ArrDynamic[E], n: USize) -> Res[Void, AllocException] { }
}


cls GlobalAlloc[E] { }


sup [E] GlobalAlloc[E] ext Alloc[E] {
    @public
    @no_impl
    fun allocate(n: USize) -> Res[ArrDynamic[E], AllocException] { }
    
    @public
    @no_impl
    fun allocate_zeroed(n: USize) -> Res[ArrDynamic[E], AllocException] { }
    
    @public
    @no_impl
    fun deallocate(memory: ArrDynamic[E]) -> Res[Void, AllocException] { }
    
    @public
    @no_impl
    fun reallocate(memory: &mut ArrDynamic[E], n: USize) -> Res[Void, AllocException] { }
}
