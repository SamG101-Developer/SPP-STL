@public
cls I64 { }


sup I64 ext abstract::SignedInteger[64] { }


sup I64 ext std::copy::Copy { }


sup I64 ext std::ops::add::Add[Rhs=I64, Ret=I64] {
    @compiler_builtin
    fun add(self, that: I64) -> I64 { }
}


sup I64 ext std::ops::sub::Sub[Rhs=I64, Ret=I64] {
    @compiler_builtin
    fun sub(self, that: I64) -> I64 { }
}


sup I64 ext std::ops::mul::Mul[Rhs=I64, Ret=I64] {
    @compiler_builtin
    fun mul(self, that: I64) -> I64 { }
}


sup I64 ext std::ops::div::Div[Rhs=I64, Ret=I64] {
    @compiler_builtin
    fun div(self, that: I64) -> I64 { }
}


sup I64 ext std::ops::rem::Rem[Rhs=I64, Ret=I64] {
    @compiler_builtin
    fun rem(self, that: I64) -> I64 { }
}


sup I64 ext std::ops::mod::Mod[Rhs=I64, Ret=I64] {
    @compiler_builtin
    fun mod(self, that: I64) -> I64 { }
}


sup I64 ext std::ops::rem::Pow[Rhs=I64, Ret=I64] {
    @compiler_builtin
    fun pow(self, that: I64) -> I64 { }
}


sup I64 ext std::ops::eq::Eq[Rhs=I64] {
    @compiler_builtin
    fun eq(&self, that: I64) -> boolean::Bool { }
}


sup I64 ext std::ops::ne::Ne[Rhs=I64] {
    @compiler_builtin
    fun ne(&self, that: I64) -> boolean::Bool { }
}


sup I64 ext std::ops::ge::Ge[Rhs=I64] {
    @compiler_builtin
    fun ge(&self, that: I64) -> boolean::Bool { }
}


sup I64 ext std::ops::gt::Gt[Rhs=I64] {
    @compiler_builtin
    fun gt(&self, that: I64) -> boolean::Bool { }
}


sup I64 ext std::ops::le::Le[Rhs=I64] {
    @compiler_builtin
    fun le(&self, that: I64) -> boolean::Bool { }
}


sup I64 ext std::ops::lt::Lt[Rhs=I64] {
    @compiler_builtin
    fun lt(&self, that: I64) -> boolean::Bool { }
}
