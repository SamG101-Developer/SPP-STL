use std::boolean::Bool
use std::number::biguint::BigUInt
use std::void::Void


@public
cls BigInt {
    sign: Bool
    data: BigUInt
}


sup BigInt ext std::ops::add::Add[Rhs=BigInt, Ret=BigInt] {
    @no_impl
    fun add(self, that: BigInt) -> BigInt { }
}


sup BigInt ext std::ops::sub::Sub[Rhs=BigInt, Ret=BigInt] {
    @no_impl
    fun sub(self, that: BigInt) -> BigInt { }
}


sup BigInt ext std::ops::mul::Mul[Rhs=BigInt, Ret=BigInt] {
    @no_impl
    fun mul(self, that: BigInt) -> BigInt { }
}


sup BigInt ext std::ops::div::Div[Rhs=BigInt, Ret=BigInt] {
    @no_impl
    fun div(self, that: BigInt) -> BigInt { }
}


sup BigInt ext std::ops::rem::Rem[Rhs=BigInt, Ret=BigInt] {
    @no_impl
    fun rem(self, that: BigInt) -> BigInt { }
}


sup BigInt ext std::ops::mod::Mod[Rhs=BigInt, Ret=BigInt] {
    @no_impl
    fun mod(self, that: BigInt) -> BigInt { }
}


sup BigInt ext std::ops::pow::Pow[Rhs=BigInt, Ret=BigInt] {
    @no_impl
    fun pow(self, that: BigInt) -> BigInt { }
}


sup BigInt ext std::ops::add_assign::AddAssign[Rhs=BigInt] {
    @no_impl
    fun add_assign(&mut self, that: BigInt) -> Void { }
}


sup BigInt ext std::ops::sub_assign::SubAssign[Rhs=BigInt] {
    @no_impl
    fun sub_assign(&mut self, that: BigInt) -> Void { }
}


sup BigInt ext std::ops::mul_assign::MulAssign[Rhs=BigInt] {
    @no_impl
    fun mul_assign(&mut self, that: BigInt) -> Void { }
}


sup BigInt ext std::ops::div_assign::DivAssign[Rhs=BigInt] {
    @no_impl
    fun div_assign(&mut self, that: BigInt) -> Void { }
}


sup BigInt ext std::ops::rem_assign::RemAssign[Rhs=BigInt] {
    @no_impl
    fun rem_assign(&mut self, that: BigInt) -> Void { }
}


sup BigInt ext std::ops::mod_assign::ModAssign[Rhs=BigInt] {
    @no_impl
    fun mod_assign(&mut self, that: BigInt) -> Void { }
}


sup BigInt ext std::ops::pow_assign::PowAssign[Rhs=BigInt] {
    @no_impl
    fun pow_assign(&mut self, that: BigInt) -> Void { }
}


sup BigInt ext std::ops::eq::Eq[Rhs=BigInt] {
    @no_impl
    fun eq(&self, that: BigInt) -> boolean::Bool { }
}


sup BigInt ext std::ops::ne::Ne[Rhs=BigInt] {
    @no_impl
    fun ne(&self, that: BigInt) -> boolean::Bool { }
}


sup BigInt ext std::ops::ge::Ge[Rhs=BigInt] {
    @no_impl
    fun ge(&self, that: BigInt) -> boolean::Bool { }
}


sup BigInt ext std::ops::gt::Gt[Rhs=BigInt] {
    @no_impl
    fun gt(&self, that: BigInt) -> boolean::Bool { }
}


sup BigInt ext std::ops::le::Le[Rhs=BigInt] {
    @no_impl
    fun le(&self, that: BigInt) -> boolean::Bool { }
}


sup BigInt ext std::ops::lt::Lt[Rhs=BigInt] {
    @no_impl
    fun lt(&self, that: BigInt) -> boolean::Bool { }
}
