@public
cls Mutex[T] {
    @public unique_id: number::U64
    @public native_id: number::U64
    value: T
}


sup [T] Mutex[T] {
    @public
    fun new(value: T) -> Mutex[T] {
        let unique_id = 0_u64  # ffi::libc::rand()
        let native_id = 0_u64  # ffi::pthread::pthread_create_mutex()
        ret Mutex(unique_id, native_id, value)
    }

    @public
    cor lock_ref(&mut self) -> generator::Gen[&T] {
        # ffi::pthread::pthread_mutex_lock(&mut self.native_id)
        gen &self.value
    }

    @public
    cor lock_mut(&mut self) -> generator::Gen[&mut T] {
        # ffi::pthread::pthread_mutex_lock(&mut self.native_id)
        gen &mut self.value
    }

    @public
    cor try_lock_ref(&mut self) -> generator::Gen[&T] {
        # ffi::pthread::pthread_mutex_trylock(&mut self.native_id)
        gen &self.value
    }

    @public
    cor try_lock_mut(&mut self) -> generator::Gen[&mut T] {
        # ffi::pthread::pthread_mutex_trylock(&mut self.native_id)
        gen &mut self.value
    }

    @public
    fun unlock(&mut self) -> void::Void {
        # ffi::pthread::pthread_mutex_unlock(&mut self.native_id)
    }
}


sup [T] Mutex[T] ext std::ops::del::Del {
    fun del(self) -> void::Void {
        # ffi::pthread::pthread_mutex_destroy(self.native_identifier)
    }
}
