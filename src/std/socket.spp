cls SocketError { }

cls SocketDomain { }


cls TcpSocket {
    handler: number::U64
}

sup TcpSocket {
    @no_impl fun new(domain: SocketDomain) -> result::Res[TcpSocket, SocketError] { }
    @no_impl fun connect(&self, host: string::Str, port: number::U16) -> result::Res[void::Void, SocketError] {}
    @no_impl fun close(&self) -> Void { }
}

sup TcpSocket {
    @no_impl fun bind(&self, host: string::Str, port: number::U16) -> result::Res[void::Void, SocketError] { }
    @no_impl fun listen(&self, backlog: number::U64 = 5_u64) -> result::Res[void::Void, SocketError] { }
    @no_impl fun accept(&self) -> result::Res[TcpSocket, SocketError] { }
}

sup TcpSocket {
    @no_impl fun send(&self, data: string::Str) -> result::Res[void::Void, SocketError] { }
    @no_impl fun recv(&self, size: number::U64) -> result::Res[string::Str, SocketError] { }
    @no_impl fun recv_all(&self, eos: string::Str = "\r\n") -> result::Res[string::Str, SocketError] { }
}
