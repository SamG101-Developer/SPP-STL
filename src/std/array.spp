use std::allocator::Alloc
use std::allocator::GlobalAlloc
use std::memory::Memory
use std::number::usize::USize
use std::result::Fail
use std::result::Exception
use std::void::Void


cls BoundsException { }


sup BoundsException ext Exception { }


@public
cls Arr[T, cmp n: USize, A = GlobalAlloc[T]] { }


sup [T, A, cmp n: USize] Arr[T, n, A] ext Memory[T, A] {
    fun len(&self) -> USize {
        ret n
    }
}


@public
cls ArrDynamic[T, A = GlobalAlloc[T]] {
    length: USize
}


sup [T, A] ArrDynamic[T, A] ext Memory[T, A] {
    fun len(&self) -> USize {
        ret self.length
    }
}


sup [T, A] ArrDynamic[T, A] {
    @no_impl
    @public
    fun new_with_cap(capacity: USize) -> ArrDynamic[T, A] { }

    @protected
    fun grow_by_one(&mut self) -> Void {
        self.capacity += 1_uz
        # case Self::Allocator::reallocate(&mut self, self.capacity) of
        #    is Fail(err) { }
    }

    @protected
    fun grow_double(&mut self) -> Void {
        self.capacity *= 2_uz
        # case Self::Allocator::reallocate(&mut self, self.capacity) of
        #    is Fail(err) { }
    }
}
