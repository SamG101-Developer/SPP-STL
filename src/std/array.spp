use std::allocator::Alloc
use std::allocator::GlobalAlloc
use std::cast::From
use std::clone::Clone
use std::mem::memory::Memory
use std::number::USize
use std::result::Fail
use std::slice::Slice
use std::void::Void


@public
cls Arr[T, cmp n: USize] { }


sup [T, cmp n: USize] Arr[T, n] ext Memory[T] {
    fun len(&self) -> USize {
        ret n
    }
}


sup [T, cmp n: USize] Arr[T, n] ext From[Self, Slice[T]] {
    fun from(that: Slice[T]) -> Self {
        ret Arr[T, n](ptr=that.ptr, cap=that.cap)
    }
}
