use std::cast::From
use std::mem::memory::Memory
use std::mem::view::View
use std::number::USize
use std::slice::Slice


@public
cls Arr[T, cmp n: USize] {
    memory: Memory[T]
}


sup [T, cmp n: USize] Arr[T, n] ext View[T] {
    fun length(&self) -> USize {
        ret n
    }
}


sup [T, A, cmp n: USize] Arr[T, n] ext From[Self, Slice[T, A]] {
    fun from(that: Slice[T, A]) -> Self {
        ret Arr[T, n](memory=Memory(ptr=that.mem.ptr, cap=n))
    }
}
