use std::cast::From


# Unsigned integers.
type U8 = std::num::sized_integer::SizedInteger[8_u32, false]
type U16 = std::num::sized_integer::SizedInteger[16_u32, false]
type U32 = std::num::sized_integer::SizedInteger[32_u32, false]
type U64 = std::num::sized_integer::SizedInteger[64_u32, false]
type U128 = std::num::sized_integer::SizedInteger[128_u32, false]
type U256 = std::num::sized_integer::SizedInteger[256_u32, false]
type USize = std::num::sized_integer::SizedInteger[64_u32, false]


# Signed integers.
type S8 = std::num::sized_integer::SizedInteger[8_u32, true]
type S16 = std::num::sized_integer::SizedInteger[16_u32, true]
type S32 = std::num::sized_integer::SizedInteger[32_u32, true]
type S64 = std::num::sized_integer::SizedInteger[64_u32, true]
type S128 = std::num::sized_integer::SizedInteger[128_u32, true]
type S256 = std::num::sized_integer::SizedInteger[256_u32, true]
type SSize = std::num::sized_integer::SizedInteger[64_u32, true]


# Floating points.
type F8 = std::num::sized_floating_point::SizedFloatingPoint[8_u32]
type F16 = std::num::sized_floating_point::SizedFloatingPoint[16_u32]
type F32 = std::num::sized_floating_point::SizedFloatingPoint[32_u32]
type F64 = std::num::sized_floating_point::SizedFloatingPoint[64_u32]
type F128 = std::num::sized_floating_point::SizedFloatingPoint[128_u32]


# Can't add the FP256 until LLVM adds intrinsic support for them.
# type F256 = std::num::sized_floating_point::SizedFloatingPoint[256_u32]


sup U64 ext From[Self, U32] {
    fun from(that: U32) -> Self {
        ret intrinsic::zext[64_u32](that)
    }
}
