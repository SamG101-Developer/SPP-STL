use std::boolean::Bool
use std::clone::Clone
use std::iterator::Iterator
use std::number::u8::U8
use std::ops::eq::Eq
use std::ops::ne::Ne
use std::vector::Vec


@public
cls Str {
    data: Vec[U8]
}


sup Str {
    @public
    fun to_ascii_uppercase(&self) -> Str {
        # ret self.data.iter_ref().map(U8::to_ascii_uppercase).collect(Str)
        ret ""
    }

    @public
    fun to_ascii_lowercase(&self) -> Str {
        # ret self.data.iter_ref().map(U8::to_ascii_lowercase).collect(Str)
        ret ""
    }

    @no_impl
    fun split(&self, sep: &Str) -> Vec[Str] {
    }
}


sup Str {
    @public
    cor chars(&self) -> Iterator[U8] {
        gen with self.data.clone().iter_mov()
    }
}


sup Str ext Eq[Rhs=Str] {
    fun eq(&self, that: &Str) -> Bool {
        # ret self.data.iter_ref().zip(that.data.iter_ref()).map(U8::eq).all()
        ret false
    }
}


sup Str ext Ne[Rhs=Str] {
    fun ne(&self, that: &Str) -> Bool {
        # ret self.data.iter_ref().zip(that.data.iter_ref()).map(U8::ne).any()
        ret false
    }
}


sup Str ext Clone[Out=Str] {
    @no_impl
    fun clone(&self) -> Str { }
}


sup Str ext std::ops::add::Add[Rhs=Str, Ret=Str] {
    @no_impl
    fun add(self, that: Str) -> Str { }
}

