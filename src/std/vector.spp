@public
cls Vec[T] {
    # data: Arr[T]
    # length: U64
}

sup [T] Vec[T] {
    @no_impl fun push_head(&mut self, ..items: T) -> void::Void { }
    @no_impl fun push_tail(&mut self, ..items: T) -> void::Void { }
    @no_impl fun push(&mut self, index: number::U64, ..items: T) -> void::Void { }
}

sup [T] Vec[T] {
    @no_impl fun take_head(&mut self) -> T { }
    @no_impl fun take_tail(&mut self) -> T { }
    @no_impl fun take(&mut self, index: number::U64) -> T { }
}

sup [T] Vec[T] {
    @no_impl cor get_head_ref(&self) -> generator::Gen[&T] { }
    @no_impl cor get_tail_ref(&self) -> generator::Gen[&T] { }
    @no_impl cor get_ref(&self, index: number::U64) -> generator::Gen[&T] { }
}

sup [T] Vec[T] {
    @no_impl cor get_head_mut(&mut self) -> generator::Gen[&mut T] { }
    @no_impl cor get_tail_mut(&mut self) -> generator::Gen[&mut T] { }
    @no_impl cor get_mut(&mut self, index: number::U64) -> generator::Gen[&mut T] { }
}

sup [T] Vec[T] {
    @no_impl fun clear(&mut self) -> void::Void { }
    @no_impl fun is_empty(&self) -> boolean::Bool { }
}

sup [T] Vec[T] {
    @no_impl fun resize(&mut self, new_length: number::U64) -> void::Void { }
    @no_impl fun reserve(&mut self, new_capacity: number::U64) -> void::Void { }
    @no_impl fun shrink_to_fit(&mut self) -> void::Void { }
}

sup [T] Vec[T] ext algorithms::Sortable[T] {
    @no_impl fun sort(&mut self) -> void::Void { }
    @no_impl fun sort_by(&mut self, compare: function::FunRef[boolean::Bool, (T, T)]) -> void::Void { }
}

sup [T] Vec[T] ext iterator::IterMov[T] {
    cor iter_mov(self) -> generator::Gen[T] { }
}

sup [T] Vec[T] ext iterator::IterMut[T] {
    cor iter_mut(&mut self) -> generator::Gen[&mut T] { }
}

sup [T] Vec[T] ext iterator::IterRef[T] {
    cor iter_ref(&self) -> generator::Gen[&T] { }
}
