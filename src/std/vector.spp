use std::algorithms::Sortable
use std::allocator::Alloc
use std::allocator::GlobalAlloc
use std::boolean::Bool
use std::clone::Clone
use std::function::FunRef
use std::generator::GenOnce
use std::generator::GenOpt
use std::iterator::IndexMut
use std::iterator::IndexRef
use std::iterator::Iterator
use std::iterator::IterMov
use std::iterator::IterMut
use std::iterator::IterRef
use std::mem::memory::Memory
use std::number::USize
use std::slice::Slice
use std::void::Void


@public
cls Vec[T, A: Alloc[T] = GlobalAlloc[T]] {
    buf: Slice[T, A]
}


sup [T, A] Vec[T, A] {
    type Element = T
    type Allocator = A

    @public
    @no_impl
    fun new() -> Vec[T, A] {
        # ret Vec[T, A](buf=A::alloc(1_uz))
    }
}


sup [T, A] Vec[T, A] {
    @public
    fun push(&mut self, element: T) -> Void {
        case self.buf.len == self.buf.mem.cap { self.grow_double() }
        self.buf.mem.place(self.buf.len, element)
        self.buf.len += 1_uz
    }

    @public
    fun insert(&mut self, index: USize, element: T) -> Void {
        case self.buf.len == self.buf.mem.cap { self.grow_double() }
        # self.buf.shift(index, 1_uz)
        self.buf.mem.place(index, element)
        self.buf.len += 1_uz
    }

    @private
    fun grow_double(&mut self) -> Void {
        let new_cap = self.buf.mem.cap * 2_uz
        # A::realloc(&mut self.buf, new_cap) TODO
    }
}


sup [T, A] Vec[T, A] {
    cor get_head_ref(&self) -> GenOpt[&T] {
        gen with self.get_ref(0_uz)
    }

    cor get_tail_ref(&self) -> GenOpt[&T] {
        gen with self.get_ref(self.buf.len - 1_uz)
    }

    cor get_ref(&self, index: USize) -> GenOpt[&T] {
        case index >= self.buf.len { gen }
        gen self.index_ref(index)
    }
}


sup [T, A] Vec[T, A] {
    cor get_head_mut(&mut self) -> GenOpt[&mut T] {
        gen with self.get_mut(0_uz)
    }

    cor get_tail_mut(&mut self) -> GenOpt[&mut T] {
        gen with self.get_mut(self.buf.len - 1_uz)
    }

    cor get_mut(&mut self, index: USize) -> GenOpt[&mut T] {
        case index >= self.buf.len { gen }
        gen self.index_mut(index)
    }
}


sup [T, A] Vec[T, A] {
    fun clear(&mut self) -> Void {
        self.buf.mem.clear()
    }

    @no_impl fun is_empty(&self) -> Bool {
        ret self.buf.len == 0_uz
    }
}


sup [T, A] Vec[T, A] {
    fun resize(&mut self, new_length: USize) -> Void {
        self.buf.resize(new_length)
        self.buf.len = new_length
    }

    fun shrink_to_fit(&mut self) -> Void {
        self.buf.resize(self.buf.len)
    }
}


sup [T, A] Vec[T, A] ext Clone[Out=Self] {
    @no_impl
    fun clone(&self) -> Self {
        # ret Vec[T, A](buf=self.buf.clone())
    }
}


sup [T, A] Vec[T, A] ext Sortable[T] {
    @no_impl
    fun sort(&mut self) -> Void { }

    @no_impl
    fun sort_by(&mut self, compare: FunRef[(T, T), Bool]) -> Void { }
}


sup [T, A] Vec[T, A] ext IterMov[T] {
    cor iter_mov(self) -> Iterator[T] {
        gen with self.buf.iter_mov()
    }
}


sup [T, A] Vec[T, A] ext IterMut[T] {
    cor iter_mut(&mut self) -> Iterator[&mut T] {
        gen with self.buf.iter_mut()
    }
}


sup [T, A] Vec[T, A] ext IterRef[T] {
    cor iter_ref(&self) -> Iterator[&T] {
        gen with self.buf.iter_ref()
    }
}


sup [T, A] Vec[T, A] ext IndexMut[T, USize] {
    cor index_mut(&mut self, index: USize) -> GenOnce[&mut T] {
        gen with self.buf.index_mut(index)
    }
}


sup [T, A] Vec[T, A] ext IndexRef[T, USize] {
    cor index_ref(&self, index: USize) -> GenOnce[&T] {
        gen with self.buf.index_ref(index)
    }
}


sup [T, A] Vec[T, A] ext std::ops::add::Add[Self, Out=Self] {
    fun add(self, that: Self) -> Self {
        let mut result = self.clone()
        # todo
        ret result
    }
}


sup [T, A] Vec[T, A] ext std::ops::add::AddAssign[Self] {
    fun add_assign(&mut self, that: Self) -> Void {
        # todo
        # self.buf.extend(that.buf)
    }
}
