use std::algorithms::Sortable
use std::allocator::Alloc
use std::allocator::GlobalAlloc
use std::array::ArrDynamic
use std::boolean::Bool
use std::clone::Clone
use std::function::FunRef
use std::generator::Gen
use std::generator::GenOpt
use std::iterator::IndexMut
use std::iterator::IndexRef
use std::iterator::Iterator
use std::iterator::IterMov
use std::iterator::IterMut
use std::iterator::IterRef
use std::number::usize::USize
use std::void::Void


@public
cls Vec[T, A = GlobalAlloc[T]] {
    buffer: ArrDynamic[T, A]
    length: USize
}


sup [T, A] Vec[T, A] {
    type Element = T
    type Allocator = A

    fun new() -> Vec[T, A] {
        ret Vec[T, A](buffer=ArrDynamic[T, A]::new_with_cap(1_uz))
    }

    fun len(&self) -> USize {
        ret self.length
    }
}


sup [T, A] Vec[T, A] {
    @public
    fun push(&mut self, element: T) -> Void {
        case self.length == self.buffer.cap() { self.buffer.grow_double() }
        self.buffer.place(self.length, element)
        self.length += 1_uz
    }

    @public
    @no_impl
    fun insert(&mut self, index: USize, element: T) -> Void {
        case self.length == self.buffer.cap() { self.buffer.grow_double() }
        self.buffer.shift(index, 1_uz)
        self.buffer.place(index, element)
        self.length += 1_uz
    }
}


sup [T, A] Vec[T, A] {
    cor get_head_ref(&self) -> GenOpt[&T, once=true] {
        gen with self.get_ref(0_uz)
    }

    cor get_tail_ref(&self) -> GenOpt[&T, once=true] {
        gen with self.get_ref(self.length - 1_uz)
    }

    cor get_ref(&self, index: USize) -> GenOpt[&T, once=true] {
        case index < self.length { gen self.index_ref(index).res() } else { gen }
    }
}


sup [T, A] Vec[T, A] {
    cor get_head_mut(&mut self) -> GenOpt[&mut T, once=true] {
        gen with self.get_mut(0_uz)
    }

    cor get_tail_mut(&mut self) -> GenOpt[&mut T, once=true] {
        gen with self.get_mut(self.length - 1_uz)
    }

    cor get_mut(&mut self, index: USize) -> GenOpt[&mut T, once=true] {
        case index < self.length { gen self.index_mut(index).res() } else { gen }
    }
}


sup [T, A] Vec[T, A] {
    fun clear(&mut self) -> Void {
        self.buffer.clear()
    }

    @no_impl fun is_empty(&self) -> Bool {
        ret self.length == 0_uz
    }
}


sup [T, A] Vec[T, A] {
    fun resize(&mut self, new_length: USize) -> Void {
        self.buffer.resize(new_length)
        self.length = new_length
    }

    fun shrink_to_fit(&mut self) -> Void {
        self.buffer.resize(self.length)
    }
}


sup [T, A] Vec[T, A] ext Clone[Vec[T, A]] {
    fun clone(&self) -> Vec[T, A] {
        ret Vec[T, A](buffer=self.buffer.clone(), length=self.length)
    }
}


sup [T, A] Vec[T, A] ext Sortable[T] {
    @no_impl
    fun sort(&mut self) -> Void { }

    @no_impl
    fun sort_by(&mut self, compare: FunRef[(T, T), Bool]) -> Void { }
}


sup [T, A] Vec[T, A] ext IterMov[T] {
    cor iter_mov(self) -> Iterator[T] {
        gen with self.buffer.iter_mov()
    }
}


sup [T, A] Vec[T, A] ext IterMut[T] {
    cor iter_mut(&mut self) -> Iterator[&mut T] {
        gen with self.buffer.iter_mut()
    }
}


sup [T, A] Vec[T, A] ext IterRef[T] {
    cor iter_ref(&self) -> Iterator[&T] {
        gen with self.buffer.iter_ref()
    }
}


sup [T, A] Vec[T, A] ext IndexMut[T, USize] {
    cor index_mut(&mut self, index: USize) -> Gen[&mut T, once=true] {
        gen with self.buffer.index_mut(index)
    }
}


sup [T, A] Vec[T, A] ext IndexRef[T, USize] {
    cor index_ref(&self, index: USize) -> Gen[&T, once=true] {
        gen with self.buffer.index_ref(index)
    }
}
