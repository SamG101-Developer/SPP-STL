use std::boolean::Bool
use std::number::U8
use std::number::S32
use std::number::USize
use std::result::Exception
use std::result::Res
use std::vector::Vec
use std::void::Void


cls StreamWriteException { }
sup StreamWriteException ext Exception { }


cls StreamReadException { }
sup StreamReadException ext Exception { }


cls StreamSeekException { }
sup StreamSeekException ext Exception { }


cls WritableStream { }


cls ReadableStream { }


cls SeekableStream { }


sup WritableStream {
    @public
    @abstract_method
    fun write(&mut self, data: &Vec[U8], length: USize) -> Res[S32, StreamWriteException] { }

    @public
    @abstract_method
    fun flush(&mut self) -> Res[Void, StreamWriteException] { }

    @public
    @no_impl
    @virtual_method
    fun write_all(&mut self, data: &Vec[U8]) -> Res[S32, StreamWriteException] {
        ret Pass(val=0_s32)
    }
}


sup ReadableStream {
    @public
    @abstract_method
    fun read(&mut self, len: USize) -> Res[Vec[U8], StreamReadException] { }

    @public
    @no_impl
    @virtual_method
    fun read_all(&mut self) -> Res[Vec[U8], StreamReadException] {
        ret Pass(val=Vec[U8]())
    }
}


sup SeekableStream {
    @public
    @abstract_method
    fun seek(&mut self, offset: USize) -> Res[Void, StreamSeekException] { }

    @public
    @no_impl
    @virtual_method
    fun seek_from_start(&mut self, offset: USize) -> Res[Void, StreamSeekException] { }

    @public
    @no_impl
    @virtual_method
    fun seek_from_end(&mut self, offset: USize) -> Res[Void, StreamSeekException] { }

    @public
    @no_impl
    @virtual_method
    fun rewind(&mut self) -> Res[Void, StreamSeekException] { }

    @public
    @no_impl
    @virtual_method
    fun stream_len(&mut self) -> Res[USize, StreamSeekException] { }

    @public
    @no_impl
    @virtual_method
    fun stream_pos(&mut self) -> Res[USize, StreamSeekException] { }
}
